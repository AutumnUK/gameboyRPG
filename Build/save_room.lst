                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module save_room
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _pause_init
                                     12 	.globl _battle
                                     13 	.globl _playerSpawn
                                     14 	.globl _movePlayerSprites
                                     15 	.globl _updatePlayerPosition
                                     16 	.globl _handlePlayerInput
                                     17 	.globl _gotogxy
                                     18 	.globl _gprintf
                                     19 	.globl _vsync
                                     20 	.globl _joypad
                                     21 	.globl _rng
                                     22 	.globl _stepsNeeded
                                     23 	.globl _stepsBase
                                     24 	.globl _saveRoom
                                     25 ;--------------------------------------------------------
                                     26 ; special function registers
                                     27 ;--------------------------------------------------------
                                     28 ;--------------------------------------------------------
                                     29 ; ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area _DATA
                                     32 ;--------------------------------------------------------
                                     33 ; ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area _INITIALIZED
    00000000                         36 _stepsNeeded::
    00000000                         37 	.ds 1
    00000001                         38 _rng::
    00000001                         39 	.ds 1
                                     40 ;--------------------------------------------------------
                                     41 ; absolute external ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area _DABS (ABS)
                                     44 ;--------------------------------------------------------
                                     45 ; global & static initialisations
                                     46 ;--------------------------------------------------------
                                     47 	.area _HOME
                                     48 	.area _GSINIT
                                     49 	.area _GSFINAL
                                     50 	.area _GSINIT
                                     51 ;--------------------------------------------------------
                                     52 ; Home
                                     53 ;--------------------------------------------------------
                                     54 	.area _HOME
                                     55 	.area _HOME
                                     56 ;--------------------------------------------------------
                                     57 ; code
                                     58 ;--------------------------------------------------------
                                     59 	.area _CODE
                                     60 ;src\save_room.c:9: void saveRoom(void) {
                                     61 ;	---------------------------------
                                     62 ; Function saveRoom
                                     63 ; ---------------------------------
    00000000                         64 _saveRoom::
    00000000 E8 DF            [16]   65 	add	sp, #-33
                                     66 ;src\save_room.c:10: gotogxy(0,0);
    00000002 AF               [ 4]   67 	xor	a, a
    00000003 0F               [ 4]   68 	rrca
    00000004 F5               [16]   69 	push	af
    00000005 CDr00r00         [24]   70 	call	_gotogxy
    00000008 E1               [12]   71 	pop	hl
                                     72 ;src\save_room.c:11: gprintf(" ");
    00000009 11rB2r00         [12]   73 	ld	de, #___str_1
    0000000C D5               [16]   74 	push	de
    0000000D CDr00r00         [24]   75 	call	_gprintf
    00000010 E1               [12]   76 	pop	hl
                                     77 ;src\save_room.c:12: stepsNeeded = (stepsNeeded + stepsBase + rng);
    00000011 FAr00r00         [16]   78 	ld	a, (#_stepsNeeded)
    00000014 C6 0A            [ 8]   79 	add	a, #0x0a
    00000016 21r01r00         [12]   80 	ld	hl, #_rng
    00000019 86               [ 8]   81 	add	a, (hl)
    0000001A EAr00r00         [16]   82 	ld	(#_stepsNeeded),a
                                     83 ;src\save_room.c:17: playerSpawn(&player, 40, 80);
    0000001D 11 50 00         [12]   84 	ld	de, #0x0050
    00000020 D5               [16]   85 	push	de
    00000021 01 28 00         [12]   86 	ld	bc, #0x0028
    00000024 21 02 00         [12]   87 	ld	hl, #2
    00000027 39               [ 8]   88 	add	hl, sp
    00000028 5D               [ 4]   89 	ld	e, l
    00000029 54               [ 4]   90 	ld	d, h
    0000002A CDr00r00         [24]   91 	call	_playerSpawn
                                     92 ;src\save_room.c:19: while (state = 1) {   
    0000002D                         93 00107$:
                                     94 ;src\save_room.c:20: vsync();
    0000002D CDr00r00         [24]   95 	call	_vsync
                                     96 ;src\save_room.c:21: rng ++;
    00000030 21r01r00         [12]   97 	ld	hl, #_rng
    00000033 34               [12]   98 	inc	(hl)
                                     99 ;src\save_room.c:22: if (rng >= 9) { rng = 0; }
    00000034 7E               [ 8]  100 	ld	a, (hl)
    00000035 D6 09            [ 8]  101 	sub	a, #0x09
    00000037 38 02            [12]  102 	jr	C, 00102$
    00000039 36 00            [12]  103 	ld	(hl), #0x00
    0000003B                        104 00102$:
                                    105 ;src\save_room.c:24: if ( player.steps > stepsNeeded) {
    0000003B F8 11            [12]  106 	ldhl	sp,	#17
    0000003D 4E               [ 8]  107 	ld	c, (hl)
    0000003E FAr00r00         [16]  108 	ld	a, (#_stepsNeeded)
    00000041 91               [ 4]  109 	sub	a, c
    00000042 30 3C            [12]  110 	jr	NC, 00104$
                                    111 ;src\save_room.c:27: Enemy slime = {
    00000044 F8 12            [12]  112 	ldhl	sp,	#18
    00000046 3E 53            [ 8]  113 	ld	a, #0x53
    00000048 22               [ 8]  114 	ld	(hl+), a
    00000049 3E 4C            [ 8]  115 	ld	a, #0x4c
    0000004B 22               [ 8]  116 	ld	(hl+), a
    0000004C 3E 49            [ 8]  117 	ld	a, #0x49
    0000004E 22               [ 8]  118 	ld	(hl+), a
    0000004F 3E 4D            [ 8]  119 	ld	a, #0x4d
    00000051 22               [ 8]  120 	ld	(hl+), a
    00000052 3E 45            [ 8]  121 	ld	a, #0x45
    00000054 22               [ 8]  122 	ld	(hl+), a
    00000055 36 00            [12]  123 	ld	(hl), #0x00
    00000057 F8 12            [12]  124 	ldhl	sp,	#18
    00000059 4D               [ 4]  125 	ld	c, l
    0000005A 44               [ 4]  126 	ld	b, h
    0000005B F8 18            [12]  127 	ldhl	sp,	#24
    0000005D 3E 05            [ 8]  128 	ld	a, #0x05
    0000005F 22               [ 8]  129 	ld	(hl+), a
    00000060 AF               [ 4]  130 	xor	a, a
    00000061 22               [ 8]  131 	ld	(hl+), a
    00000062 3E 05            [ 8]  132 	ld	a, #0x05
    00000064 22               [ 8]  133 	ld	(hl+), a
    00000065 AF               [ 4]  134 	xor	a, a
    00000066 22               [ 8]  135 	ld	(hl+), a
    00000067 3E 02            [ 8]  136 	ld	a,#0x02
    00000069 22               [ 8]  137 	ld	(hl+),a
    0000006A 22               [ 8]  138 	ld	(hl+), a
    0000006B 3E 02            [ 8]  139 	ld	a,#0x02
    0000006D 22               [ 8]  140 	ld	(hl+),a
    0000006E 22               [ 8]  141 	ld	(hl+), a
    0000006F AF               [ 4]  142 	xor	a, a
    00000070 77               [ 8]  143 	ld	(hl), a
                                    144 ;src\save_room.c:37: battle(&player , &slime);
    00000071 21 00 00         [12]  145 	ld	hl, #0
    00000074 39               [ 8]  146 	add	hl, sp
    00000075 5D               [ 4]  147 	ld	e, l
    00000076 54               [ 4]  148 	ld	d, h
    00000077 CDr00r00         [24]  149 	call	_battle
                                    150 ;src\save_room.c:38: SHOW_SPRITES;
    0000007A F0r00            [12]  151 	ldh	a, (_LCDC_REG + 0)
    0000007C F6 02            [ 8]  152 	or	a, #0x02
    0000007E E0r00            [12]  153 	ldh	(_LCDC_REG + 0), a
    00000080                        154 00104$:
                                    155 ;src\save_room.c:41: if ( joypad() & J_SELECT ) {
    00000080 CDr00r00         [24]  156 	call	_joypad
    00000083 CB 77            [ 8]  157 	bit	6, a
    00000085 28 09            [12]  158 	jr	Z, 00106$
                                    159 ;src\save_room.c:42: pause_init(&player);
    00000087 21 00 00         [12]  160 	ld	hl, #0
    0000008A 39               [ 8]  161 	add	hl, sp
    0000008B 5D               [ 4]  162 	ld	e, l
    0000008C 54               [ 4]  163 	ld	d, h
    0000008D CDr00r00         [24]  164 	call	_pause_init
    00000090                        165 00106$:
                                    166 ;src\save_room.c:45: handlePlayerInput(&player);
    00000090 21 00 00         [12]  167 	ld	hl, #0
    00000093 39               [ 8]  168 	add	hl, sp
    00000094 5D               [ 4]  169 	ld	e, l
    00000095 54               [ 4]  170 	ld	d, h
    00000096 CDr00r00         [24]  171 	call	_handlePlayerInput
                                    172 ;src\save_room.c:46: updatePlayerPosition(&player);
    00000099 21 00 00         [12]  173 	ld	hl, #0
    0000009C 39               [ 8]  174 	add	hl, sp
    0000009D 5D               [ 4]  175 	ld	e, l
    0000009E 54               [ 4]  176 	ld	d, h
    0000009F CDr00r00         [24]  177 	call	_updatePlayerPosition
                                    178 ;src\save_room.c:47: movePlayerSprites(&player);
    000000A2 21 00 00         [12]  179 	ld	hl, #0
    000000A5 39               [ 8]  180 	add	hl, sp
    000000A6 5D               [ 4]  181 	ld	e, l
    000000A7 54               [ 4]  182 	ld	d, h
    000000A8 CDr00r00         [24]  183 	call	_movePlayerSprites
    000000AB C3r2Dr00         [16]  184 	jp	00107$
                                    185 ;src\save_room.c:50: }
    000000AE E8 21            [16]  186 	add	sp, #33
    000000B0 C9               [16]  187 	ret
    000000B1                        188 _stepsBase:
    000000B1 0A                     189 	.db #0x0a	; 10
    000000B2                        190 ___str_1:
    000000B2 20                     191 	.ascii " "
    000000B3 00                     192 	.db 0x00
                                    193 	.area _CODE
                                    194 	.area _INITIALIZER
    00000000                        195 __xinit__stepsNeeded:
    00000000 01                     196 	.db #0x01	; 1
    00000001                        197 __xinit__rng:
    00000001 00                     198 	.db #0x00	; 0
                                    199 	.area _CABS (ABS)
