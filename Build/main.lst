                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.4.1 #14650 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _systemSetup
                                     13 	.globl _set_sprite_data
                                     14 	.globl _get_bkg_tile_xy
                                     15 	.globl _set_bkg_tile_xy
                                     16 	.globl _set_bkg_data
                                     17 	.globl _vsync
                                     18 	.globl _joypad
                                     19 	.globl _TestTiles
                                     20 ;--------------------------------------------------------
                                     21 ; special function registers
                                     22 ;--------------------------------------------------------
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area _DATA
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area _INITIALIZED
    00000000                         31 _TestTiles::
    00000000                         32 	.ds 80
                                     33 ;--------------------------------------------------------
                                     34 ; absolute external ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area _DABS (ABS)
                                     37 ;--------------------------------------------------------
                                     38 ; global & static initialisations
                                     39 ;--------------------------------------------------------
                                     40 	.area _HOME
                                     41 	.area _GSINIT
                                     42 	.area _GSFINAL
                                     43 	.area _GSINIT
                                     44 ;--------------------------------------------------------
                                     45 ; Home
                                     46 ;--------------------------------------------------------
                                     47 	.area _HOME
                                     48 	.area _HOME
                                     49 ;--------------------------------------------------------
                                     50 ; code
                                     51 ;--------------------------------------------------------
                                     52 	.area _CODE
                                     53 ;src\main.c:7: void main(void) {    
                                     54 ;	---------------------------------
                                     55 ; Function main
                                     56 ; ---------------------------------
    00000000                         57 _main::
    00000000 E8 F2            [16]   58 	add	sp, #-14
                                     59 ;src\main.c:8: systemSetup();
    00000002 CDr00r00         [24]   60 	call	_systemSetup
                                     61 ;src\main.c:10: set_bkg_data(   0,4,TestTiles);
    00000005 01r00r00         [12]   62 	ld	bc, #_TestTiles+0
    00000008 C5               [16]   63 	push	bc
    00000009 21 00 04         [12]   64 	ld	hl, #0x400
    0000000C E5               [16]   65 	push	hl
    0000000D CDr00r00         [24]   66 	call	_set_bkg_data
    00000010 E8 04            [16]   67 	add	sp, #4
                                     68 ;src\main.c:11: set_sprite_data(0,4,TestTiles);
    00000012 C5               [16]   69 	push	bc
    00000013 21 00 04         [12]   70 	ld	hl, #0x400
    00000016 E5               [16]   71 	push	hl
    00000017 CDr00r00         [24]   72 	call	_set_sprite_data
    0000001A E8 04            [16]   73 	add	sp, #4
                                     74 ;src\../Tools/GBDK/include/gb/gb.h:1875: shadow_OAM[nb].tile=tile;
    0000001C 21r02r00         [12]   75 	ld	hl, #(_shadow_OAM + 2)
    0000001F 36 01            [12]   76 	ld	(hl), #0x01
    00000021 21r06r00         [12]   77 	ld	hl, #(_shadow_OAM + 6)
    00000024 36 01            [12]   78 	ld	(hl), #0x01
    00000026 21r0Ar00         [12]   79 	ld	hl, #(_shadow_OAM + 10)
    00000029 36 01            [12]   80 	ld	(hl), #0x01
    0000002B 21r0Er00         [12]   81 	ld	hl, #(_shadow_OAM + 14)
    0000002E 36 01            [12]   82 	ld	(hl), #0x01
                                     83 ;src\main.c:20: int camera_x = 10;
    00000030 F8 08            [12]   84 	ldhl	sp,	#8
    00000032 3E 0A            [ 8]   85 	ld	a, #0x0a
    00000034 22               [ 8]   86 	ld	(hl+), a
    00000035 AF               [ 4]   87 	xor	a, a
    00000036 77               [ 8]   88 	ld	(hl), a
                                     89 ;src\main.c:21: int camera_y = 10;
    00000037 01 0A 00         [12]   90 	ld	bc, #0x000a
                                     91 ;src\main.c:24: while (1) {
    0000003A                         92 00122$:
                                     93 ;src\main.c:25: vsync();
    0000003A CDr00r00         [24]   94 	call	_vsync
                                     95 ;src\../Tools/GBDK/include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
    0000003D 21r00r00         [12]   96 	ld	hl, #_shadow_OAM
                                     97 ;src\../Tools/GBDK/include/gb/gb.h:1962: itm->y=y, itm->x=x;
    00000040 3E 48            [ 8]   98 	ld	a, #0x48
    00000042 22               [ 8]   99 	ld	(hl+), a
    00000043 36 50            [12]  100 	ld	(hl), #0x50
                                    101 ;src\../Tools/GBDK/include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
    00000045 21r04r00         [12]  102 	ld	hl, #(_shadow_OAM + 4)
                                    103 ;src\../Tools/GBDK/include/gb/gb.h:1962: itm->y=y, itm->x=x;
    00000048 3E 48            [ 8]  104 	ld	a, #0x48
    0000004A 22               [ 8]  105 	ld	(hl+), a
    0000004B 36 58            [12]  106 	ld	(hl), #0x58
                                    107 ;src\../Tools/GBDK/include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
    0000004D 21r08r00         [12]  108 	ld	hl, #(_shadow_OAM + 8)
                                    109 ;src\../Tools/GBDK/include/gb/gb.h:1962: itm->y=y, itm->x=x;
    00000050 3E 50            [ 8]  110 	ld	a, #0x50
    00000052 22               [ 8]  111 	ld	(hl+), a
    00000053 36 50            [12]  112 	ld	(hl), #0x50
                                    113 ;src\../Tools/GBDK/include/gb/gb.h:1961: OAM_item_t * itm = &shadow_OAM[nb];
    00000055 21r0Cr00         [12]  114 	ld	hl, #(_shadow_OAM + 12)
                                    115 ;src\../Tools/GBDK/include/gb/gb.h:1962: itm->y=y, itm->x=x;
    00000058 3E 50            [ 8]  116 	ld	a, #0x50
    0000005A 22               [ 8]  117 	ld	(hl+), a
    0000005B 36 58            [12]  118 	ld	(hl), #0x58
                                    119 ;src\main.c:32: for (int i = camera_y; i < 18 + camera_y; i++) {
    0000005D F8 08            [12]  120 	ldhl	sp,#8
    0000005F 2A               [ 8]  121 	ld	a, (hl+)
    00000060 5F               [ 4]  122 	ld	e, a
    00000061 56               [ 8]  123 	ld	d, (hl)
    00000062 21 14 00         [12]  124 	ld	hl, #0x0014
    00000065 19               [ 8]  125 	add	hl, de
    00000066 33               [ 8]  126 	inc	sp
    00000067 33               [ 8]  127 	inc	sp
    00000068 E5               [16]  128 	push	hl
    00000069 21 12 00         [12]  129 	ld	hl, #0x0012
    0000006C 09               [ 8]  130 	add	hl, bc
    0000006D E5               [16]  131 	push	hl
    0000006E 7D               [ 4]  132 	ld	a, l
    0000006F F8 04            [12]  133 	ldhl	sp,	#4
    00000071 77               [ 8]  134 	ld	(hl), a
    00000072 E1               [12]  135 	pop	hl
    00000073 7C               [ 4]  136 	ld	a, h
    00000074 F8 03            [12]  137 	ldhl	sp,	#3
    00000076 77               [ 8]  138 	ld	(hl), a
    00000077 F8 0A            [12]  139 	ldhl	sp,	#10
    00000079 79               [ 4]  140 	ld	a, c
    0000007A 22               [ 8]  141 	ld	(hl+), a
    0000007B 70               [ 8]  142 	ld	(hl), b
    0000007C                        143 00136$:
    0000007C F8 0A            [12]  144 	ldhl	sp,	#10
    0000007E 5D               [ 4]  145 	ld	e, l
    0000007F 54               [ 4]  146 	ld	d, h
    00000080 F8 02            [12]  147 	ldhl	sp,	#2
    00000082 1A               [ 8]  148 	ld	a, (de)
    00000083 13               [ 8]  149 	inc	de
    00000084 96               [ 8]  150 	sub	a, (hl)
    00000085 23               [ 8]  151 	inc	hl
    00000086 1A               [ 8]  152 	ld	a, (de)
    00000087 9E               [ 8]  153 	sbc	a, (hl)
    00000088 1A               [ 8]  154 	ld	a, (de)
    00000089 57               [ 4]  155 	ld	d, a
    0000008A CB 7E            [12]  156 	bit	7, (hl)
    0000008C 28 07            [12]  157 	jr	Z, 00235$
    0000008E CB 7A            [ 8]  158 	bit	7, d
    00000090 20 08            [12]  159 	jr	NZ, 00236$
    00000092 BF               [ 4]  160 	cp	a, a
    00000093 18 05            [12]  161 	jr	00236$
    00000095                        162 00235$:
    00000095 CB 7A            [ 8]  163 	bit	7, d
    00000097 28 01            [12]  164 	jr	Z, 00236$
    00000099 37               [ 4]  165 	scf
    0000009A                        166 00236$:
    0000009A D2r2Fr01         [16]  167 	jp	NC, 00102$
                                    168 ;src\main.c:34: for (int j = camera_x; j < 20 + camera_x; j++) {
    0000009D F8 0A            [12]  169 	ldhl	sp,#10
    0000009F 2A               [ 8]  170 	ld	a, (hl+)
    000000A0 5F               [ 4]  171 	ld	e, a
    000000A1 56               [ 8]  172 	ld	d, (hl)
    000000A2 6B               [ 4]  173 	ld	l, e
    000000A3 62               [ 4]  174 	ld	h, d
    000000A4 29               [ 8]  175 	add	hl, hl
    000000A5 19               [ 8]  176 	add	hl, de
    000000A6 29               [ 8]  177 	add	hl, hl
    000000A7 19               [ 8]  178 	add	hl, de
    000000A8 29               [ 8]  179 	add	hl, hl
    000000A9 19               [ 8]  180 	add	hl, de
    000000AA 29               [ 8]  181 	add	hl, hl
    000000AB 29               [ 8]  182 	add	hl, hl
    000000AC E5               [16]  183 	push	hl
    000000AD 7D               [ 4]  184 	ld	a, l
    000000AE F8 0E            [12]  185 	ldhl	sp,	#14
    000000B0 77               [ 8]  186 	ld	(hl), a
    000000B1 E1               [12]  187 	pop	hl
    000000B2 7C               [ 4]  188 	ld	a, h
    000000B3 F8 0D            [12]  189 	ldhl	sp,	#13
    000000B5 32               [ 8]  190 	ld	(hl-), a
    000000B6 2A               [ 8]  191 	ld	a, (hl+)
    000000B7 5F               [ 4]  192 	ld	e, a
    000000B8 56               [ 8]  193 	ld	d, (hl)
    000000B9 21r00r00         [12]  194 	ld	hl, #_debug_map
    000000BC 19               [ 8]  195 	add	hl, de
    000000BD E5               [16]  196 	push	hl
    000000BE 7D               [ 4]  197 	ld	a, l
    000000BF F8 06            [12]  198 	ldhl	sp,	#6
    000000C1 77               [ 8]  199 	ld	(hl), a
    000000C2 E1               [12]  200 	pop	hl
    000000C3 7C               [ 4]  201 	ld	a, h
    000000C4 F8 05            [12]  202 	ldhl	sp,	#5
    000000C6 77               [ 8]  203 	ld	(hl), a
    000000C7 F8 08            [12]  204 	ldhl	sp,	#8
    000000C9 7E               [ 8]  205 	ld	a, (hl)
    000000CA F8 0C            [12]  206 	ldhl	sp,	#12
    000000CC 77               [ 8]  207 	ld	(hl), a
    000000CD F8 09            [12]  208 	ldhl	sp,	#9
    000000CF 7E               [ 8]  209 	ld	a, (hl)
    000000D0 F8 0D            [12]  210 	ldhl	sp,	#13
    000000D2 77               [ 8]  211 	ld	(hl), a
    000000D3                        212 00133$:
    000000D3 F8 0C            [12]  213 	ldhl	sp,	#12
    000000D5 5D               [ 4]  214 	ld	e, l
    000000D6 54               [ 4]  215 	ld	d, h
    000000D7 F8 00            [12]  216 	ldhl	sp,	#0
    000000D9 1A               [ 8]  217 	ld	a, (de)
    000000DA 13               [ 8]  218 	inc	de
    000000DB 96               [ 8]  219 	sub	a, (hl)
    000000DC 23               [ 8]  220 	inc	hl
    000000DD 1A               [ 8]  221 	ld	a, (de)
    000000DE 9E               [ 8]  222 	sbc	a, (hl)
    000000DF 1A               [ 8]  223 	ld	a, (de)
    000000E0 57               [ 4]  224 	ld	d, a
    000000E1 CB 7E            [12]  225 	bit	7, (hl)
    000000E3 28 07            [12]  226 	jr	Z, 00237$
    000000E5 CB 7A            [ 8]  227 	bit	7, d
    000000E7 20 08            [12]  228 	jr	NZ, 00238$
    000000E9 BF               [ 4]  229 	cp	a, a
    000000EA 18 05            [12]  230 	jr	00238$
    000000EC                        231 00237$:
    000000EC CB 7A            [ 8]  232 	bit	7, d
    000000EE 28 01            [12]  233 	jr	Z, 00238$
    000000F0 37               [ 4]  234 	scf
    000000F1                        235 00238$:
    000000F1 30 31            [12]  236 	jr	NC, 00137$
                                    237 ;src\main.c:36: set_bkg_tile_xy(j - camera_x,i - camera_y,debug_map[i][j]);
    000000F3 F8 04            [12]  238 	ldhl	sp,#4
    000000F5 2A               [ 8]  239 	ld	a, (hl+)
    000000F6 5F               [ 4]  240 	ld	e, a
    000000F7 56               [ 8]  241 	ld	d, (hl)
    000000F8 F8 0C            [12]  242 	ldhl	sp,	#12
    000000FA 2A               [ 8]  243 	ld	a,	(hl+)
    000000FB 66               [ 8]  244 	ld	h, (hl)
    000000FC 6F               [ 4]  245 	ld	l, a
    000000FD 19               [ 8]  246 	add	hl, de
    000000FE 5D               [ 4]  247 	ld	e, l
    000000FF 54               [ 4]  248 	ld	d, h
    00000100 1A               [ 8]  249 	ld	a, (de)
    00000101 F8 06            [12]  250 	ldhl	sp,	#6
    00000103 77               [ 8]  251 	ld	(hl), a
    00000104 F8 0A            [12]  252 	ldhl	sp,	#10
    00000106 2A               [ 8]  253 	ld	a, (hl+)
    00000107 23               [ 8]  254 	inc	hl
    00000108 59               [ 4]  255 	ld	e, c
    00000109 93               [ 4]  256 	sub	a, e
    0000010A 5F               [ 4]  257 	ld	e, a
    0000010B 7E               [ 8]  258 	ld	a, (hl)
    0000010C F8 08            [12]  259 	ldhl	sp,	#8
    0000010E 56               [ 8]  260 	ld	d, (hl)
    0000010F 2B               [ 8]  261 	dec	hl
    00000110 92               [ 4]  262 	sub	a, d
    00000111 32               [ 8]  263 	ld	(hl-), a
    00000112 C5               [16]  264 	push	bc
    00000113 2A               [ 8]  265 	ld	a, (hl+)
    00000114 F5               [16]  266 	push	af
    00000115 33               [ 8]  267 	inc	sp
    00000116 7E               [ 8]  268 	ld	a, (hl)
    00000117 CDr00r00         [24]  269 	call	_set_bkg_tile_xy
    0000011A C1               [12]  270 	pop	bc
                                    271 ;src\main.c:34: for (int j = camera_x; j < 20 + camera_x; j++) {
    0000011B F8 0C            [12]  272 	ldhl	sp,	#12
    0000011D 34               [12]  273 	inc	(hl)
    0000011E 20 B3            [12]  274 	jr	NZ, 00133$
    00000120 23               [ 8]  275 	inc	hl
    00000121 34               [12]  276 	inc	(hl)
    00000122 18 AF            [12]  277 	jr	00133$
    00000124                        278 00137$:
                                    279 ;src\main.c:32: for (int i = camera_y; i < 18 + camera_y; i++) {
    00000124 F8 0A            [12]  280 	ldhl	sp,	#10
    00000126 34               [12]  281 	inc	(hl)
    00000127 C2r7Cr00         [16]  282 	jp	NZ,00136$
    0000012A 23               [ 8]  283 	inc	hl
    0000012B 34               [12]  284 	inc	(hl)
    0000012C C3r7Cr00         [16]  285 	jp	00136$
    0000012F                        286 00102$:
                                    287 ;src\main.c:41: if (joypad() & J_LEFT)  { 
    0000012F CDr00r00         [24]  288 	call	_joypad
    00000132 CB 4F            [ 8]  289 	bit	1, a
    00000134 28 19            [12]  290 	jr	Z, 00106$
                                    291 ;src\main.c:42: if ( get_bkg_tile_xy( 8,8 ) != 0x01) {
    00000136 3E 08            [ 8]  292 	ld	a, #0x08
    00000138 F5               [16]  293 	push	af
    00000139 33               [ 8]  294 	inc	sp
    0000013A 3E 08            [ 8]  295 	ld	a, #0x08
    0000013C F5               [16]  296 	push	af
    0000013D 33               [ 8]  297 	inc	sp
    0000013E CDr00r00         [24]  298 	call	_get_bkg_tile_xy
    00000141 E1               [12]  299 	pop	hl
    00000142 1D               [ 4]  300 	dec	e
    00000143 28 0A            [12]  301 	jr	Z, 00106$
                                    302 ;src\main.c:43: moving = 1; camera_x -=1; moving = 0; 
    00000145 F8 08            [12]  303 	ldhl	sp,#8
    00000147 5E               [ 8]  304 	ld	e, (hl)
    00000148 23               [ 8]  305 	inc	hl
    00000149 56               [ 8]  306 	ld	d, (hl)
    0000014A 2B               [ 8]  307 	dec	hl
    0000014B 1B               [ 8]  308 	dec	de
    0000014C 73               [ 8]  309 	ld	(hl), e
    0000014D 23               [ 8]  310 	inc	hl
    0000014E 72               [ 8]  311 	ld	(hl), d
    0000014F                        312 00106$:
                                    313 ;src\main.c:47: if (joypad() & J_RIGHT) { 
    0000014F CDr00r00         [24]  314 	call	_joypad
    00000152 0F               [ 4]  315 	rrca
    00000153 30 16            [12]  316 	jr	NC, 00110$
                                    317 ;src\main.c:48: if ( get_bkg_tile_xy( 11,8 ) != 0x01) {
    00000155 3E 08            [ 8]  318 	ld	a, #0x08
    00000157 F5               [16]  319 	push	af
    00000158 33               [ 8]  320 	inc	sp
    00000159 3E 0B            [ 8]  321 	ld	a, #0x0b
    0000015B F5               [16]  322 	push	af
    0000015C 33               [ 8]  323 	inc	sp
    0000015D CDr00r00         [24]  324 	call	_get_bkg_tile_xy
    00000160 E1               [12]  325 	pop	hl
    00000161 1D               [ 4]  326 	dec	e
    00000162 28 07            [12]  327 	jr	Z, 00110$
                                    328 ;src\main.c:49: moving = 1; camera_x +=1; moving = 0; 
    00000164 F8 08            [12]  329 	ldhl	sp,	#8
    00000166 34               [12]  330 	inc	(hl)
    00000167 20 02            [12]  331 	jr	NZ, 00245$
    00000169 23               [ 8]  332 	inc	hl
    0000016A 34               [12]  333 	inc	(hl)
    0000016B                        334 00245$:
    0000016B                        335 00110$:
                                    336 ;src\main.c:53: if (joypad() & J_UP)    { 
    0000016B CDr00r00         [24]  337 	call	_joypad
    0000016E CB 57            [ 8]  338 	bit	2, a
    00000170 28 10            [12]  339 	jr	Z, 00114$
                                    340 ;src\main.c:54: if ( get_bkg_tile_xy( 9,6) != 0x01) {
    00000172 3E 06            [ 8]  341 	ld	a, #0x06
    00000174 F5               [16]  342 	push	af
    00000175 33               [ 8]  343 	inc	sp
    00000176 3E 09            [ 8]  344 	ld	a, #0x09
    00000178 F5               [16]  345 	push	af
    00000179 33               [ 8]  346 	inc	sp
    0000017A CDr00r00         [24]  347 	call	_get_bkg_tile_xy
    0000017D E1               [12]  348 	pop	hl
    0000017E 1D               [ 4]  349 	dec	e
    0000017F 28 01            [12]  350 	jr	Z, 00114$
                                    351 ;src\main.c:55: moving = 1; camera_y -=1; moving = 0; 
    00000181 0B               [ 8]  352 	dec	bc
    00000182                        353 00114$:
                                    354 ;src\main.c:59: if (joypad() & J_DOWN)  { 
    00000182 CDr00r00         [24]  355 	call	_joypad
    00000185 CB 5F            [ 8]  356 	bit	3, a
    00000187 CAr3Ar00         [16]  357 	jp	Z,00122$
                                    358 ;src\main.c:60: if ( get_bkg_tile_xy( 9, 9) != 0x01) {
    0000018A 21 09 09         [12]  359 	ld	hl, #0x909
    0000018D E5               [16]  360 	push	hl
    0000018E CDr00r00         [24]  361 	call	_get_bkg_tile_xy
    00000191 E1               [12]  362 	pop	hl
    00000192 1D               [ 4]  363 	dec	e
    00000193 CAr3Ar00         [16]  364 	jp	Z,00122$
                                    365 ;src\main.c:61: moving = 1; camera_y += 1; moving = 0; 
    00000196 03               [ 8]  366 	inc	bc
    00000197 C3r3Ar00         [16]  367 	jp	00122$
                                    368 ;src\main.c:68: }
    0000019A E8 0E            [16]  369 	add	sp, #14
    0000019C C9               [16]  370 	ret
                                    371 	.area _CODE
                                    372 	.area _INITIALIZER
    00000000                        373 __xinit__TestTiles:
    00000000 00                     374 	.db #0x00	; 0
    00000001 00                     375 	.db #0x00	; 0
    00000002 00                     376 	.db #0x00	; 0
    00000003 00                     377 	.db #0x00	; 0
    00000004 00                     378 	.db #0x00	; 0
    00000005 00                     379 	.db #0x00	; 0
    00000006 00                     380 	.db #0x00	; 0
    00000007 00                     381 	.db #0x00	; 0
    00000008 00                     382 	.db #0x00	; 0
    00000009 00                     383 	.db #0x00	; 0
    0000000A 00                     384 	.db #0x00	; 0
    0000000B 00                     385 	.db #0x00	; 0
    0000000C 00                     386 	.db #0x00	; 0
    0000000D 00                     387 	.db #0x00	; 0
    0000000E 00                     388 	.db #0x00	; 0
    0000000F 00                     389 	.db #0x00	; 0
    00000010 FF                     390 	.db #0xff	; 255
    00000011 FF                     391 	.db #0xff	; 255
    00000012 FF                     392 	.db #0xff	; 255
    00000013 FF                     393 	.db #0xff	; 255
    00000014 FF                     394 	.db #0xff	; 255
    00000015 FF                     395 	.db #0xff	; 255
    00000016 FF                     396 	.db #0xff	; 255
    00000017 FF                     397 	.db #0xff	; 255
    00000018 FF                     398 	.db #0xff	; 255
    00000019 FF                     399 	.db #0xff	; 255
    0000001A FF                     400 	.db #0xff	; 255
    0000001B FF                     401 	.db #0xff	; 255
    0000001C FF                     402 	.db #0xff	; 255
    0000001D FF                     403 	.db #0xff	; 255
    0000001E FF                     404 	.db #0xff	; 255
    0000001F FF                     405 	.db #0xff	; 255
    00000020 10                     406 	.db #0x10	; 16
    00000021 00                     407 	.db #0x00	; 0
    00000022 8A                     408 	.db #0x8a	; 138
    00000023 00                     409 	.db #0x00	; 0
    00000024 44                     410 	.db #0x44	; 68	'D'
    00000025 00                     411 	.db #0x00	; 0
    00000026 00                     412 	.db #0x00	; 0
    00000027 00                     413 	.db #0x00	; 0
    00000028 90                     414 	.db #0x90	; 144
    00000029 00                     415 	.db #0x00	; 0
    0000002A 60                     416 	.db #0x60	; 96
    0000002B 00                     417 	.db #0x00	; 0
    0000002C 08                     418 	.db #0x08	; 8
    0000002D 00                     419 	.db #0x00	; 0
    0000002E 04                     420 	.db #0x04	; 4
    0000002F 00                     421 	.db #0x00	; 0
    00000030 FF                     422 	.db #0xff	; 255
    00000031 FF                     423 	.db #0xff	; 255
    00000032 1A                     424 	.db #0x1a	; 26
    00000033 FD                     425 	.db #0xfd	; 253
    00000034 58                     426 	.db #0x58	; 88	'X'
    00000035 BF                     427 	.db #0xbf	; 191
    00000036 18                     428 	.db #0x18	; 24
    00000037 FF                     429 	.db #0xff	; 255
    00000038 EF                     430 	.db #0xef	; 239
    00000039 FF                     431 	.db #0xff	; 255
    0000003A 89                     432 	.db #0x89	; 137
    0000003B F7                     433 	.db #0xf7	; 247
    0000003C 81                     434 	.db #0x81	; 129
    0000003D FF                     435 	.db #0xff	; 255
    0000003E A3                     436 	.db #0xa3	; 163
    0000003F DD                     437 	.db #0xdd	; 221
    00000040 00                     438 	.db #0x00	; 0
    00000041 00                     439 	.db #0x00	; 0
    00000042 00                     440 	.db #0x00	; 0
    00000043 00                     441 	.db #0x00	; 0
    00000044 00                     442 	.db #0x00	; 0
    00000045 00                     443 	.db #0x00	; 0
    00000046 00                     444 	.db #0x00	; 0
    00000047 00                     445 	.db #0x00	; 0
    00000048 00                     446 	.db #0x00	; 0
    00000049 00                     447 	.db #0x00	; 0
    0000004A 00                     448 	.db #0x00	; 0
    0000004B 00                     449 	.db #0x00	; 0
    0000004C 00                     450 	.db #0x00	; 0
    0000004D 00                     451 	.db #0x00	; 0
    0000004E 00                     452 	.db #0x00	; 0
    0000004F 00                     453 	.db #0x00	; 0
                                    454 	.area _CABS (ABS)
